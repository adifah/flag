{"ts":1341848385888,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , everyauth = require('everyauth')\n  , auth = require('./auth')\n  , conf = require('./conf')\n  , routes = require('./routes')\n  , logger = require('winston')\n  , connect = require('express/node_modules/connect')\n  , sessionStore = new connect.session.MemoryStore\n  , users = require('./users')\n  , games = require('./games')\n  , loggly = require('winston-loggly');  // Requiring `winston-loggly` will expose `winston.transports.Loggly`\n\nlogger.add(logger.transports.File, conf.logger.file);\nlogger.add(logger.transports.Loggly, conf.logger.loggly);\n\nvar port = process.env.C9_PORT || process.env.PORT || 3000; // process.env.C9_PORT is for c9.io, process.env.PORT is for heroku, 3000 for everything else\n\neveryauth.debug = false;\n\n// start server\nvar app = module.exports = express.createServer();\n\n// connect socket.io to express\nvar io = require('socket.io').listen(app);\n\n// set socket protocol to xhr-polling (no websocket support from c9.io or heroku yet\nio.configure(function () { \n  io.set(\"transports\", [\"xhr-polling\"]); \n  io.set(\"polling duration\", 10); \n});\n\n// Configuration\napp.configure(function(){\n    app.set('views', __dirname + '/views');\n    app.set('view engine', 'jade');\n    app.use(express.cookieParser()); // allows dealing with cookies\n    app.use(express.session({secret: 'fsln12team3', store: sessionStore})); //passphrase to hash the session\n    app.use(everyauth.middleware()); // allows express helpers determining the login status or accessing user details\n    everyauth.helpExpress(app); // allows using helper methods in express views (like everyauth.loggedIn)\n    app.use(express.bodyParser());\n    app.use(express.methodOverride());\n    app.use(app.router);\n    app.use(express.static(__dirname + '/public'));\n    app.use(express.compiler({ src: __dirname + '/public', enable: ['less'] }));\n});\n\napp.configure('development', function(){\n    app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\n});\n\napp.configure('production', function(){\n    app.use(express.errorHandler());\n});\n\n// Sockets\nio.sockets.on('connection', function (socket) {\n    var twitterId = socket.handshake.session.auth.twitter.user.id;\n    socket.on('start', function (data) {\n        logger.info(\"user \" + twitterId + \" starts game \" + data.game);\n        // create a new game instance with given data.level assigend to twitterId\n        // a given callback should emit the game details to the client\n        if(data.game === 'memorize') {\n            games.createMemoryGame(data, function(game) {\n                socket.emit('newGame', game);\n            });\n        }\n        if(data.game === 'gpsQuestioning') {\n            games.createGpsQuestioningGame(data, function(game) {\n                socket.emit('newGame', game);\n            });\n        }\n    });\n    socket.on('score', function (data) {\n        var user = users.getUser(twitterId);\n        logger.info(\"user \" + twitterId + \" finished with \" + data.score + \" points\");\n        users.setScore(twitterId, data);\n    });\n});\n// set authorization for socket.io, only users with a cookie containing an express sid are accepted\nio.set('authorization', function (data, accept) {\n    if (data.headers.cookie) {\n        logger.info(\"cookie: \" + data.headers.cookie);\n        \n        data.cookie = connect.utils.parseCookie(data.headers.cookie);\n        data.sessionID = data.cookie['connect.sid'];\n        // (literally) get the session data from the session store\n        sessionStore.get(data.sessionID, function (err, session) {\n            if (err || !session) {\n                // if we cannot grab a session, turn down the connection\n                logger.info(\"no session\");\n                accept('Error', false);\n            } else {\n                if(!session.auth) {\n                    logger.info(\"user not logged in\");\n                    accept('Error', false);\n                } else {\n                    // save the session data and accept the connection\n                    logger.info(\"accept: \");\n                    data.session = session;\n                    accept(null, true);\n                }\n            }\n        });\n    } else {\n        logger.info(\"no cookie\");\n       return accept('No cookie transmitted.', false);\n    }\n});\n\n// Routes\napp.get('/', routes.index);\napp.get('/login', routes.login);\napp.get('/dashboard', routes.dashboard);\napp.get('/leaderboard/:gameName?', routes.leaderboard);\napp.get('/memorize', routes.memorize);\napp.get('/gpsQuestioning', routes.gpsQuestioning);\n\napp.listen(port, function(){\n    logger.info(\"Express server listening on port \" + app.address().port + \" in \" + app.settings.env + \" mode\");\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":4719}]],"length":4719}
